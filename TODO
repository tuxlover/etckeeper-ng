# Todo until 0.2.3
# + first we should repair all fixmes to get the code clean
# + use -P rsync option --progress use a progress bar for git 
# + the journal function should also list the user who fullfilled the backup task
# + and whenever a new bug pops up we should drop it to the BUGS file
# + new health command: which checks the integrety for git repository health 
#(git fsck) and whether there any dangaling commits whch where not tracked becuase 
# + write a new module: create_checksums.sh
# - which is based on the variable HAVE_CHECKSUMS
# - HAVE_CHECKSUMS can contain one of the following words:
# all, exclude-only,without-exclude,none
# --> if none is set no checkfiles will be used neither created nor checked
# --> in a later module verify_checksums.sh
# these new modules affect all modules we have written so far 
# + create a module verify_checksums.sh
# + create a new command to only check for permissions interactivly
# provide an install.sh program
# improve checktools
# - do not abbort when a tool is missing , instead go ahead and check for the other tools and then state a tool is missing
# - be more restrict and even check for version numbers
# do a git snapshot and release as tarball
# have a freeze function to create branches of a etckeeper-ng file list
# the configuration for etckeeper-ng depdents to much on its base directories
# journal should destinguish betwwen user added entry and enties added by the script
# one way we could use is: to denote an u or an s  in front of each entry
# having timestamps to see when a file last changed could also be usefull. especially when we are want to determin when
# a file last time was updated by package manager
# no need for pormpting for a commit message. just write added file $foo to backup should be sufficient enough
# have options for some commands. like -w --> without permission check

# Todo until 0.2.4
# make the program more efficient in speed and consumed diskspace by only
# checking in files which gets not tracked by rpm package manager
## in check_tools check if we are using rpm
## write a file rpms.lst which contains a list containing those files which
## are stored in rpm database and therefore can be checked here
# than only rsync those files which were not tracked by rpm
## for checking check against rsync and using rpm 
# content.lst should be configured in keeper.conf

# Todo until 0.2.5
# fix known bugs and change add command
# after initialize a new commit, the update command must be used
# do a git snapshot and release as tarball


# Todo until 0.2.6
# Heavy testing and fixing bugs




# Todo until 0.3.x
# add cronjob functionality to do checks in regular intervalls
# revmap the keeper.conf file
# finaly implement this restore -r option
# do a git snapshot and relese as tarball


# Todo 0.4.x
# fix known bugs
#  using multiple directories
# do a git snapshot and release as tarball

Todo in further future:
# checking for sufficient diskspace
# have an option to remove certain exclude patterns
# colorize the output
# write a simple manpage for this program
# package the program
# check wheter we are using filesystems which are using unix permissions like ext or someting
# implement ecnryption
# implement compression
# also save attributes of a file
# also check for attributes 
#  have an install script which gets the right path to install
#  update the wiki and the Manual
#  update the help
# if no file has changed tell the user also
# have multi users who are allowed to execute this script Not that root is alwayas allowed.
## exit script when a user has not the permission to a certian file this means we must check whether
## the user actually has the permisssions on every file on the /etc side
## AllowedUsers=user1:user2 ...
# restore a single file from backup
# backup over a network
# sigkill and sigtstop should be disabled
# this script does only work with non-posix bash shell, so we need to check against this
# have an option in future releases to the init commannd which also removes the exlcude files
# improve commiting such the way that we can use a name or a specific date when restoring
# have an preserve old files option to reset could be nice, this can be archieved with the --update option by rsync
# check for valid entires in the keeper.conf


## !!! HOT:  
We need a special treetments for links. when we use the rsync -L option we would get massive gigabyte
big backup. The best treatment would be to only check in links when the source points to a file which actually
can be edited. which means this file is not a  binary file. if a file is a binary file we only should have a 
check with the create_checksums module, also wie must test whether this tools are present
# we could have an option in keeper.conf
# LINKS_FOLLOW="always, no-binary,off"
# when set to always we asume the -L option for rsync if no-binary is used we skip those who are binary files and if set
to off we never follow symlinks and just folowing these
